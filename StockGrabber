package observerPattern;

import java.util.ArrayList;

/** This class implements the Subject Interface which also serves as a supplemtary class to add a secondary functionality
 * to the program by storing specific comapny stock market prices in an ArrayList. This functionality also enables the user
 * to delete specifc stock market prices by company sybmol from the ArrayList
 * @author    Elim Yao Tsiagbey
 * @version   1.0.0 9/16/2015
 */
public class StockGrabber implements Subject 
{
	private ArrayList<Observer> observers;
	private double ibmPrice;
	private double aaplPrice;
	private double googPrice;
	
	public StockGrabber()
	{
		observers = new ArrayList<Observer>();
	}
	
	@param newObserver gives the method the new company to store
	@Override
	public void register(Observer newObserver) 
	{
		observers.add(newObserver);
	}
	
	//This method enables to user to remove stored stock prices according to company symbol from the ArrayList
	@param deleteObserver indicates which company stock market details is to be deleted
	@Override
	public void unregister(Observer deleteObserver) 
	{
		int observerIndex = observers.indexOf(deleteObserver);
		System.out.println("Observer " + (observerIndex+1) + " deleted");
		observers.remove(observerIndex);
	}
	
	//This method notifies the user of changes in the stock market prices if the program is made to run in
	//a multi-thread instead of a single thread 
	@Override
	public void notifyObserver() 
	{
		for(Observer observer : observers){
		observer.update(ibmPrice,aaplPrice,googPrice);
		}
	}
	
	public void setIBMPrice(double ibmPrice)
	{
		this.ibmPrice = ibmPrice;
		notifyObserver();
	}
	
	public void setAAPLPrice(double aaplPrice)
	{
		this.aaplPrice = aaplPrice;
		notifyObserver();
	}
	
	public void setGOOGPrice(double googPrice)
	{
		this.googPrice = googPrice;
		notifyObserver();
	}
}
